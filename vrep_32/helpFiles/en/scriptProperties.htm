<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Script dialog</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Script dialog</h1>

<p>The script dialog is located at [Menu bar --&gt; Tools --&gt; Scripts]. Alternatively, it can also be accessed through its toolbar button:<br>
</p>

<p align=center><img src="images/scriptPropDialog1.jpg"></p>
<p class=imageLabel>[Script toolbar button]</p>
<br>

<p align=center><img src="images/scriptPropDialog2.jpg"></p>
<p class=imageLabel>[Script dialog]</p>
<br>

<li><strong>Insert new script</strong>: allows adding new <a href="scripts.htm">scripts</a>. Three types can be chosen from: <a href="mainScript.htm">main script</a>, <a href="childScripts.htm#nonThreaded">non-threaded child script</a>, or <a href="childScripts.htm#threaded">threaded child script</a>. Remember that there cannot be more than one main script. Child scripts can also be added by selecting an <a href="objects.htm">object</a> in the <a href="scenes.htm">scene</a>, then clicking [Menu bar --&gt; Add --&gt; Associated child script --&gt; Non-threaded] or [Menu bar --&gt; Add --&gt; Associated child script --&gt; Threaded].<br>
</li>

<li><strong>Scripts in scene</strong>: list of all scripts that are present in current scene. Scripts can be removed by using the delete-key. A double-click opens the script in the <a href="scriptEditor.htm">script editor</a>. A script can also be opened with a double-click on a script icon in the <a href="userInterface.htm#SceneHierarchy">scene hierarchy</a>.<br>
</li>

<li><strong>Explicit handling</strong>: indicates whether execution of this script should be explicitly handled. If checked, then the script won't be executed when simHandleChildScript(sim_handle_all_except_explicit) is called, but only if simHandleChildScript(sim_handle_all) or simHandleChildScript(scriptHandle) is called. This is useful if the user wishes to handle the script execution privately. Refer also to the section on <a href="explicitHandling.htm">explicit and non-explicit calls</a>.<br>
</li>

<li><strong>Script launches a new thread</strong>: if this item is enabled, then next time the selected <a href="childScripts.htm">child script</a> will be called, it will execute itself in a thread (the call will start a new thread and directly return). A subsequent call to that child script will launch another thread only if previous thread ended.</li>

<li><strong>Execute just once</strong>: by default, all scripts will be executed as many times as they are called. Selecting this item limits the number of execution passes to one at maximum. While this could also be handled with a few simple instructions inside a <a href="childScripts.htm#nonThreaded">non-threaded child script</a>, <a href="childScripts.htm#threaded">threaded child scripts</a> do not allow this: indeed, every time the thread is (re-)launched, the Lua state for that script is re-initialized (i.e. all variables are cleared).<br>
</li>

<li><strong>Execute in the sensing phase</strong>: this option, only available for non-threaded and non-explicitely handled child scripts, when enabled, informs the main script to execute the selected child script AFTER all actuation was performed. Refer to the section on <a href="mainScript.htm">main scripts</a> and to the <a href="apiFunctions.htm#simHandleSensingChildScripts">simHandleSensingChildScripts</a> command for more details.<br>
</li>

<li><strong>Associated object</strong>: <a href="objects.htm">object</a> that is currently associated with the child script.<br>
</li>

<li><strong>Execution order</strong>: specifies the execution order for a group of child scripts. The <a href="apiOverview.htm">API</a> command <a href="apiFunctions.htm#simHandleChildScript">simHandleChildScript</a>(sim_handle_all) or simHandleChildScript(sim_handle_all_except_explicit) will call (execute) all first child scripts built on the hierarchy in a random order, and most of the time this works fine. In rare cases it is however necessary to make sure one child script gets executed before or after another in order to have a good synchronization (e.g. if child script 2 is waiting for a signal from child script 1, then child script 1 should preferably be executed first (otherwise the signal will be received by child script 2 only in the next simulation pass (one simulation time step later))). If you require more than 3 execution order categories, then you should <a href="explicitHandling.htm">explicitely handle</a> the related child scripts.<br>
</li>



<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="scripts.htm">Scripts</a></li>
<li><a href="mainScript.htm">The main script</a></li>
<li><a href="childScripts.htm">Child scripts</a></li>
<li><a href="scriptEditor.htm">Script editor</a></li>
<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
