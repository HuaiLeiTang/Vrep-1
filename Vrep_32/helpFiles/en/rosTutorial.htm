<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ROS tutorial</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ROS tutorial</h1>

<p>This tutorial will try to explain in a simple way how you can manage to have V-REP <em>ROS enabled</em> (by default, the V-REP distribution for Linux should be automatically <em>ROS enabled</em>).</p>

<p>First of all you should make sure that you have gone through the <a href="http://www.ros.org/wiki/ROS/Tutorials">official ROS tutorials</a>, at least the beginner section. Then, we assume that you have the latest Ubuntu running, that ROS Fuerte is installed, and that the workspace and package folders are set. Here also refer to the <a href="http://www.ros.org/wiki/fuerte/Installation/Ubuntu">official documentation regarding the ROS installation</a>.</p>

<p>The ROS functionality in V-REP is supported via a plugin (<em>libv_repExtRos.so</em> or <em>libv_repExtRos.dylib</em>). The Linux distribution should include that file already compiled. You might however experience plugin load problems, depending on your system specificities: make sure to always inspect the terminal window of V-REP for details about plugin load operations. Plugins are loaded when V-REP is launched. The ROS plugin to V-REP will only successfully load and initialize if <em>roscore</em> is running at that time (<em>roscore</em> is the ROS master).</p>

<p>If the plugin cannot be loaded, then you should recompile it yourself. The plugin is open source and can be modified as much as needed in order to support a specific feature or to extend its functionality. The <em>programming/ros_stacks</em> folder contains 2 stacks:</p>

<li><strong>vrep</strong>: this is the stack that is needed in order to compile the plugin, but also to write applications connecting to V-REP via ROS.</li>
<li><strong>rosBubbleRob</strong>: this is the stack of a very simple robot controller that connects to V-REP via ROS.</li>


<p>Above stacks should be copied to your <em>ROS_WORKSPACE</em> folder. Make sure to inspect the stack and package dependencies (in the files stack.xml and manifest.xml). Make sure also that ROS is aware of those stacks, i.e. that you can switch to above stack folders with:</p>
<pre class=lightGreyBox>
$ roscd vrep
$ roscd rosBubbleRob</pre>

<p>You might have to run:</p>
<pre class=lightGreyBox>
$ rosstack profile</pre>


<p>The <strong>vrep</strong> stack contains two packages:</p>

<li><strong>vrep_common</strong>: this package is used to generate the services and stream messages needed to implement the V-REP API functions. Having the services and stream messages in a separate package allows for other application to use them in order to communicate with V-REP via ROS in a convenient way.</li>

<li><strong>vrep_plugin</strong>: this package is the actual plugin compiled to a &quot;.so&quot; file, and that is used by V-REP.</li>

<p>In order to build the <strong>vrep_common</strong> package, navigate to the vrep_common package folder with:</p>
<pre class=lightGreyBox>
$ roscd vrep_common</pre>

<p> and type:</p>
<pre class=lightGreyBox>
$ make</pre>

<p>That's it! Now any other ROS package will be able to use the V-REP services and stream messages by just adding the vrep_common package to its dependencies.</p>

<p>Compiling the vrep_plugin is not much more difficult, except that you will have to first create 3 symbolic links:</p>

<li><strong><em>vrep_plugin</em></strong><em>/include/v_repConst.h</em> should point onto <em>VREP_INSTALL_DIR/programming/include/v_repConst.h</em></li>
<li><strong><em>vrep_plugin</em></strong><em>/include/v_repLib.h</em> should point onto <em>VREP_INSTALL_DIR/programming/include/v_repLib.h</em></li>
<li><strong><em>vrep_plugin</em></strong><em>/src/v_repLib.cpp</em> should point onto <em>VREP_INSTALL_DIR/programming/common/v_repLib.cpp</em></li>



<p>Refer to the instruction &quot;ln -s&quot; for symbolic link creation. Now navigate to the vrep_plugin package folder with:</p>
<pre class=lightGreyBox>
$ roscd vrep_plugin</pre>


<p>and type:</p>
<pre class=lightGreyBox>
$ make</pre>

<p>The plugin should have been generated in the vrep_plugin/lib folder. Copy and paste the created plugin to the V-REP installation folder. Make sure that the name is libv_repExtRos.so. The plugin is now ready to be used!</p>

<p>Once you have the ROS plugin in place, open a terminal and start the ROS master with:</p>
<pre class=lightGreyBox>
$ roscore</pre>


<p>Open another terminal, move to the V-REP installation folder and start V-REP. This is what you should have (or similar):</p>

<pre class=lightGreyBox>
$ ./vrep.sh
License file 'v_rep':
---> ok
Simulator launched.
Plugin 'BubbleRob': loading...
Plugin 'BubbleRob': load succeeded.
Plugin 'K3': loading...
Plugin 'K3': load succeeded.
Plugin 'RemoteApi': loading...
Plugin 'RemoteApi': load succeeded.
Plugin 'Ros': loading...
Plugin 'Ros': load succeeded.</pre>


<p>Upon succesful ROS plugin load, checking the available nodes gives this:</p>
<pre class=lightGreyBox>
$ rosnode list
/rosout
/vrep</pre>

<p>The &quot;/vrep&quot; node is the node that the plugin has spawned. All services should be advertised:</p>
<pre class=lightGreyBox>
$ rosservice list
/rosout/get_loggers
/rosout/set_logger_level
/vrep/get_loggers
/vrep/set_logger_level
/vrep/simRosAddStatusbarMessage
/vrep/simRosAuxiliaryConsoleClose
/vrep/simRosAuxiliaryConsoleOpen
/vrep/simRosAuxiliaryConsolePrint
/vrep/simRosAuxiliaryConsoleShow

...

/vrep/simRosStopSimulation
/vrep/simRosSynchronous
/vrep/simRosSynchronousTrigger
/vrep/simRosTransferFile</pre>


<p>Refer to the  <a href="rosFunctionListAlphabetical.htm">full list of services that V-REP supports</a>. Checking the available topics yields this:</p>

<pre class=lightGreyBox>
$ rostopic list
/rosout
/rosout_agg
/vrep/info</pre>






<p>As you can see, there is a single V-REP topic that is advertised: &quot;info&quot;. The <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">info publisher</a> is the only one that is started as soon as the plugin is launched. All other <a href="rosPublishers.htm">V-REP topic publishers</a> or <a href="rosSubscribers.htm">V-REP topic subscribers</a> have to be individually enabled. This can only happen while a simulation is running. Two equivalent mechanisms are supported for enabling/disabling publishers/subscribers:</p>

<li><strong>Scripting</strong>: following functions are supported from within a <a href="scripts.htm">script</a>: <a href="rosPublishers.htm#simExtROS_enablePublisher">simExtROS_enablePublisher</a>, <a href="rosPublishers.htm#simExtROS_disablePublisher">simExtROS_disablePublisher</a>, <a href="rosSubscribers.htm#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a> and <a href="rosSubscribers.htm#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>.</li>

<li><strong>ROS services</strong>: four of the many ROS services that V-REP advertises can be used to enable/disable publishers/subscribers:<a href="rosServices.htm#simRosEnablePublisher">simRosEnablePublisher</a>, <a href="rosServices.htm#simRosDisablePublisher">simRosDisablePublisher</a>, <a href="rosServices.htm#simRosEnableSubscriber">simRosEnableSubscriber</a> and <a href="rosServices.htm#simRosDisableSubscriber">simRosDisableSubscriber</a>.</li>


<p> There are many supported <a href="rosPublisherTypes.htm">publisher types</a> or <a href="rosSubscriberTypes.htm">subscriber types</a>, and there is no limit in number of activated publishers/subscribers. All enabled publishers and subscribers will be automatically disabled when a simulation ends. Only the <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">info publisher </a>will continue running.</p>
<p>Try following example to start a simulation:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosStartSimulation
result: 1</pre>

<p>Following command will stop a running simulation:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosStopSimulation
result: 1</pre>


<p>Now load the demo scene &quot;rosTopicPublisherAndSubscriber.ttt&quot;, and run the simulation. The code in the <a href="childScripts.htm">child script</a> attached to &quot;Vision_sensor&quot; will enable a publisher to stream the vision sensor's image, and also enable a subscriber to listen to that same stream. The subscriber automatically applies the read data to the object/item it refers to (in that case a passive vision sensor, that is only used as a data container). So V-REP is streaming data, while listening to the same data! This is what is happening:</p>

<p align=center><img src="images/rosTut1.jpg"></p>
<p class=imageLabel>[Image publisher and image subscriber demo]</p>
<br>



<p>Make sure to double-click on the script icon next to object &quot;Vision_sensor&quot; in the scene hierarchy: this will open the script. Try experimenting a little bit with the code. You can also visualize the image that V-REP streams with following command:</p>

<pre class=lightGreyBox>
$ rosrun image_view image_view image:=/vrep/visionSensorData</pre>




<p>Now stop the simulation and load the demo scene &quot;controlTypeExamples.ttt&quot;, and run the simulation. The scene illustrates the 5 control methods currently supported in V-REP. The robots are simplistic, and also behaving in a simplistic way for simplification purposes. Run the simulation and focus on the red robot, which is controlled via ROS:</p>

<p align=center><img src="images/rosTut2.jpg"></p>
<p class=imageLabel>[External client application controlling the red robot via ROS]</p>
<br>



<p>The child script attached to the red robot, and running in a threaded fashion, is in charge of following:</p>

<li>determine some object handles (i.e. motor joint handles and proximity sensor handle)</li>
<li>verify if the ROS plugin is loaded</li>
<li>add a banner</li>
<li>and finally launch a client application. The application is called with the object handles as arguments. The client application (&quot;rosBubbleRob&quot;) is then taking over the control of the red robot via ROS.</li>

<p>After executing above's steps, the threaded child script ends, but the simulation continues. The client application &quot;rosBubbleRob&quot; is the second stack previously mentioned. It is also located in the <em>programming/ros_stacks</em> folder. The <strong>ros_bubble_rob</strong> package  can be compiled in the same way as the <strong>vrep_plugin</strong> package.</p>
<p>While simulation is running, copy and paste a few times the red robot (well, actually any of the robots!). Notice that every copy is directly operational and independent. This is one of the many strengths of V-REP!</p>
<p>Type following to inspect the data being streamed from/to V-REP:</p>
<pre class=lightGreyBox>
$ rostopic list
/rosBubbleRob11808854/wheel
/rosBubbleRob11814031/wheel
/rosBubbleRob11818573/wheel
/rosout
/rosout_agg
/vrep/info
/vrep/proxData11808854
/vrep/proxData11814031
/vrep/proxData11818573</pre>



<p>Each instance of the rosBubbleRob client will enable V-REP publishers/subscribers on a different topic name (in above example there are 3 instances of &quot;rosBubbleRob&quot; running at the same time)</p>

<p>Make sure to have a look at the rosBubbleRob client code, which contains many explanatory comments.</p>

<p>Finally, make sure to have a look at the <a href="remoteApiOverview.htm">remote API functionality</a> in V-REP: similarly to ROS, it allows for remote function execution, fast data streaming back and forth, is much simpler to use, leightweight, cross-platform, and available for 5 different languages. It can be an interesting alternative to ROS in some cases.</p>

<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
