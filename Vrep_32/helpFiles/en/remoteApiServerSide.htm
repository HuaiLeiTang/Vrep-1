<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Enabling the Remote API - server side</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Enabling the Remote API - server side</h1>


<p>
The remote API server side is implemented via a <a href="plugins.htm">V-REP plugin</a> that is based on the <a href="apiOverview.htm">regular API</a>. The remote API plugin project is located in V-REP's installation directory, under &quot;programming/v_repExtRemoteApi&quot;. Should you miss one specific function, then you can easily implement it yourself into the remote API framework (see also the section on <a href="remoteApiExtension.htm">extending the remote API</a>). </p>
<p>To enable the remote API on the server side (i.e. on V-REP's side), make sure the remote API plugin was successfully loaded at V-REP start-up (v_repExtRemoteApi.dll, libv_repExtRemoteApi.dylib or libv_repExtRemoteApi.so) (you can inspect the console window for information related to plugin loading). The remote API plugin can start as many server services as needed (each service will be listening/communicating on a different port). A server service can be started in two different ways:</p>

<li><a name="continuousRemoteApiService" id="continuousRemoteApiService"></a>At V-REP start-up (<strong>continuous remote API server service</strong>). The remote API plugin will try reading a configuration file named &quot;remoteApiConnections.txt&quot; and according to its content, start appropriate server services. Have a look at the  configuration file for details. Use this method for remote control of the simulator itself, or for synchronous* operation of the remote API (<em>synchronous</em> not in the sense of blocking operation, but in the sense that the remote API can provide trigger signals for each simulation step). With this method remote API functions will always be executed on the server side, even if simulation is not running (which is not the case with next method here below)</li>
<li><a name="temporaryRemoteApiService" id="temporaryRemoteApiService"></a>At simulation start, from within a <a href="scripts.htm">script</a> (<strong>temporary remote API server service</strong>). This is most of the time the preferred method of starting a remote API server service. With this method remote API functions will only be executed on the server side when simulation is running. A temporary remote API server service can be started or stopped with following 2 custom Lua functions (the 2 functions are exported by the plugin): </li>


<h3 class=tab><a name="simExtRemoteApiStart" id="simExtRemoteApiStart"></a>simExtRemoteApiStart</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Starts a temporary remote API server service on the specified port. The service will automatically end when the simulation finishes</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number result=simExtRemoteApiStart(number portNumber,number maxPacketSize=250,Boolean debug=false)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where to install the server service. Ports above 20000 are preferred</div>
<div><strong>maxPacketSize</strong>: the maximum size of a socket send-packet. Make sure to keep the value at 250, unless the client side has a different setting</div>
<div><strong>debug</strong>: if true, a window will display the data traffic on that port</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div>-1 if operation was not successful. In a future release, a more differentiated return value might be available</div>
<div></div></td> 
</tr> 
</table> 
<br>











<h3 class=tab><a name="simExtRemoteApiStop" id="simExtRemoteApiStop"></a>simExtRemoteApiStop</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Stops a temporary remote API server service on the specified port</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number result=simExtRemoteApiStop(number portNumber)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where the server service is running</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div>-1 if operation was not successful. In a future release, a more differentiated return value might be available</div>
<div></div></td> 
</tr> 
</table> 
<br>


<br>
<p>
You can gather information about any remote API server service with following custom Lua function (the function is exported by the plugin):
</p>






<h3><a name="simExtRemoteApiStatus" id="simExtRemoteApiStatus"></a>simExtRemoteApiStatus</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Fetches information about a server service. Use this function to enumerate all server services running.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number status, table_5 info=simExtRemoteApiStatus(number serviceIndex)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>serviceIndex</strong>: any number starting at 0.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>status</strong>: -1 if no service is running at the given index. Otherwise a bit-coded value:</div>
<div class=tab>bit 0: communication thread is running</div>
<div class=tab>bit 1: client is connected</div>
<div><strong>info</strong>: nil if no service is running at the given index. Otherwise following values:</div>
<div class=tab>info[1]: time when last client request was received</div>
<div class=tab>info[2]: time when last client request was replied</div>
<div class=tab>info[3]: time that passed between 2 successive requests from the client side</div>
<div class=tab>info[4]: number of commands received during last client request</div>
<div class=tab>info[5]: number of commands sent during last reply to client</div>
</td> 
</tr> 
</table> 
<br>



<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="remoteApiClientSide.htm">Enabling the Remote API - client side</a></li>
<li><a href="remoteApiOverview.htm">Remote API overview</a></li>
<li><a href="remoteApiModusOperandi.htm">Remote API modus operandi</a></li>
<li><a href="remoteApiFunctionListAlphabetical.htm">Alphabetical remote API function list</a></li>
<li><a href="remoteApiFunctionListCategory.htm">Remote API function list by category</a></li>
<li><a href="remoteApiConstants.htm">Remote API constants</a></li>
<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>