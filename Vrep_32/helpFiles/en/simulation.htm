<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Simulation</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Simulation</h1>

<h3 class=relatedApiFunctions><a href="apiFunctionListCategory.htm#SimulationFunctionality">Related API functions</a></h3>

<p>A simulation in V-REP can be started, paused and stopped with [Menu bar --&gt; Simulation --&gt; Start/Pause/Stop simulation] or through the related toolbar buttons:<br>
</p>

<p align=center><img src="images/simulation1.jpg"></p>
<p class=imageLabel>[Simulation start/pause/stop toolbar buttons]</p>
<br>

<p>Internally, the simulator will use additional intermediate states in order to correctly inform <a href="scripts.htm">scripts</a> or programs about what will happen next. Following state diagram illustrates the simulator's internal states:<br>
</p>

<p align=center><img src="images/simulation2.jpg"></p>
<p class=imageLabel>[Simulation state diagram]</p>
<br>

<p>Scripts and programs should always take into account the current simulation state in order to behave correctly (refer to the <a href="apiFunctions.htm#simGetSimulationState">simGetSimulationState</a> API function). Each script or application should be segmented into 3 sections, where each section is conditionally run depending on the current simulation state:<br>
</p>

<li><strong>Initialization section</strong>: the initialization section should be run only the first time the script or program is run. One would believe that monitoring the <strong>sim_simulation_advancing_firstafterstop</strong> state (see the state diagram here above) would be a good idea, however: remember, <a href="objects.htm">scene objects</a> as well as <a href="childScripts.htm">child scripts</a> can be copy/pasted into a <a href="scenes.htm">scene</a> at any time, even when a simulation is running. For that reason, instead of monitoring the <strong>sim_simulation_advancing_firstafterstop</strong> state, monitor the script execution count (<a href="apiFunctions.htm#simGetScriptExecutionCount">simGetScriptExecutionCount</a>): when zero, execute the initialization code. <a href="childScripts.htm#threaded">Threaded child scripts</a> on the other hand do not need to monitor any state for the initialization: the initialization section is simply the first part of the code. Refer to the examples in the <a href="childScripts.htm">child script</a> section for more information.<br>
</li>

<li><strong>Simulation section</strong>: the simulation section should always be run and no specific state monitoring is required except for <a href="childScripts.htm#threaded">threaded child scripts</a>. Threaded child scripts should make sure to end execution when the simulation state becomes <strong>sim_simulation_advancing_abouttostop</strong>. If not, the simulator will wait longer than needed before being able to end a simulation, and the restoration code of the threaded child script might not be run. Refer to the examples in the <a href="childScripts.htm">child script</a> section for more information.<br>
</li>

<li><strong>Restoration section</strong>: the restoration section should be run just before a simulation ends. This can be achieved by monitoring the <strong>sim_simulation_advancing_lastbeforestop</strong> state (see the state diagram here above). <a href="childScripts.htm#threaded">Threaded child scripts</a> on the other hand do not need to monitor any state for the restoration: the restoration section is simply the last part of the code. Just make sure the threaded child script exits its main loop when the state becomes <strong>sim_simulation_advancing_abouttostop</strong>. Refer to the examples in the <a href="childScripts.htm">child script</a> section for more information.<br>
</li>

<p>The simulator operates by advancing the simulation time at constant time steps. Following figure illustrates the main simulation loop:<br>
</p>

<p align=center><img src="images/simulation3.jpg"></p>
<p class=imageLabel>[Main simulation loop]</p>
<br>

<p>
Real-time simulation is supported by trying to keep the simulation time synchronized with the real time:
</p>

<p align=center><img src="images/simulation4.jpg"></p>
<p class=imageLabel>[Real-time simulation loop]</p>
<br>

<p>Following represents a very simplified <a href="mainClientApplication.htm">main client application</a> (messaging, <a href="plugins.htm">plugin</a> handling and other details have been omitted for clarity purpose):<br>
</p>

<pre class=lightBlueBox>
void initializationCallback<br>{<br>    // do some initialization here
}

void loopCallback<br>{<br>    if ( (simGetSimulationState()&amp;sim_simulation_advancing)!=0 )<br>    {<br>        if ( (simGetRealTimeSimulation()!=1)||(simIsRealTimeSimulationStepNeeded()==1) )<br>        {<br>            if ((simHandleMainScript()&amp;sim_script_main_script_not_called)==0)<br>                simAdvanceSimulationByOneStep();<br>        }<br>    }<br>}

void deinitializationCallback<br>{<br>    // do some clean-up here
}
</pre>

<p>Depending on the simulation complexity, performance of the computer and <a href="simulationPropertiesDialog.htm">simulation settings</a>, real-time simulation might not always be possible.<br>
</p>

<p>In non real-time simulations, the simulation speed (i.e. the perceived speed) is mainly dependent on two factors: the simulation time step and the number of simulation passes for one rendering pass (see the <a href="simulationPropertiesDialog.htm">simulation dialog</a> for more details). In the case of a real-time simulation, the simulation speed mainly depends on the real-time multiplication coefficient, but also to a certain degree of the simulation time step (a too small simulation time step might not be compatible with the real-time character of a simulation because of the limited calculation power of the computer). During simulation, the simulation speed can be adjusted with following toolbar buttons:<br>
</p>

<p align=center><img src="images/simulation5.jpg"></p>
<p class=imageLabel>[Simulation speed adjustment toolbar buttons]</p>
<br>

<p>The simulation speed is adjusted in a way so that the initial simulation time step is never increased (because this might have as consequence the breaking of a mechanism for example). Following two figures illustrate the simulation speed adjustment mechanisms:<br>
</p>

<p align=center><img src="images/simulation6.jpg"></p>
<p class=imageLabel>[Simulation speed adjustment mechanism for <strong>non real-time simulations</strong>]</p>
<br>

<p align=center><img src="images/simulation7.jpg"></p>
<p class=imageLabel>[Simulation speed adjustment mechanism for <strong>real-time simulations</strong>]</p>



<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="simulationPropertiesDialog.htm">Simulation settings dialog</a></li>
<li><a href="scripts.htm">Scripts</a></li>
<li><a href="mainClientApplication.htm">The main client application</a></li>
<li><a href="plugins.htm">Plugins</a></li>
<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
