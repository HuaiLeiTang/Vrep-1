<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Script calling methodology</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Script calling methodology</h1>

<p><a href="scripts.htm">Scripts</a> are called from the default <a href="mainClientApplication.htm">main client application</a> (vrep.exe) when a <a href="simulation.htm">simulation</a> is running. The main client application calls the <a href="apiFunctions.htm#simHandleMainScript">simHandleMainScript</a> API function, which executes the <a href="mainScript.htm">main script</a> of the current <a href="scenes.htm">scene</a>. From there, it is the responsibility of the main script to execute <a href="childScripts.htm">child scripts</a>. Child script execution is handled with one single <a href="apiOverview.htm">API</a> command: <a href="apiFunctions.htm#simHandleChildScript">simHandleChildScript</a>.<br>
</p>

<p>If you refer to the section on <a href="childScripts.htm">child scripts</a>, you will notice that every child script is associated with a <a href="objects.htm">scene object</a>. This is not the case for the main script that is not associated with any object. To help understand following, consider for a moment the main script associated with an imaginary scene object named &quot;world&quot;, which is the parent of all parentless objects in the scene. Following figure illustrates this idea:<br>
</p>


<p align=center><img src="images/scriptCalling1.jpg"></p>
<p class=imageLabel>[Main script and child scripts in a scene]</p>
<br>

<p>The command simHandleChildScript(sim_handle_all), when called from the main script, will execute all first encountered child scripts when exploring its tree hierarchy. In above example, a simHandleChildScript command called from the main script will execute 3 child scripts: the ones that are associated with object3, object4 and object7. The child script associated with object6 will not be executed by that command, since it is the responsibility of the child script associated with object3 to handle its own child scripts (i.e. the child scripts built on its tree hierarchy). This means that the child script associated with object6 will only be executed if the child script associated with object3 also calls simHandleChildScript(sim_handle_all).<br>
</p>

<p>In short, remember following: it is each script's responsibility to execute (or to delegate execution of) the child scripts in its tree hierarchy. <br>
</p>

<p>Child scripts that launch a thread can delegate their child script execution to the main script with the <a href="apiFunctions.htm#simDelegateChildScriptExecution">simDelegateChildScriptExecution</a> command. This is the default behavior of <a href="childScripts.htm#threaded">threaded child scripts</a>.<br>
</p>

<p>This script execution mechanism makes the handling of newly added (e.g. copy/pasted) objects or <a href="models.htm">models</a> very easy, since associated child scripts will automatically be executed, without having to modify/edit any code. Following figures illustrate the script exploration and calling performed by the main client application during a simulation:<br>
</p>


<p align=center><img src="images/scriptCalling2.jpg"></p>
<p class=imageLabel>[Application loop (main client application), main script and child scripts]</p>
<br>

<p align=center><img src="images/scriptCalling3.jpg"></p>
<p class=imageLabel>[Exploration and execution route of above's example (threaded child scripts are in light blue)]</p>
<br>

<p>Notice how child script 5 and child script 6 don't get executed because child script 4 doesn't call simHandleChildScript(sim_handle_all).<br>
</p>


<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="mainClientApplication.htm">The main client application</a></li>
<li><a href="scripts.htm">Scripts</a></li>
<li><a href="mainScript.htm">The main script</a></li>
<li><a href="childScripts.htm">Child scripts</a></li>
<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
