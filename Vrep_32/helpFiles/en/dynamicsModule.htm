<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Dynamics</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Dynamics</h1>

<h3 class=relatedApiFunctions><a href="apiFunctionListCategory.htm#dynamicsFunctionality">Related API functions</a></h3>


<p>V-REP's dynamics module is based on two different physics/dynamics engines/libraries: the <a href="http://www.bulletphysics.org">Bullet physics library</a> and the <a href="http://www.ode.org">Open Dynamics Engine (ODE)</a>. At any time, the user is free to quickly switch from one engine to the other according to his/her <a href="simulation.htm">simulation</a> needs. See <a href="acknowledgments.htm">here</a> for acknowledgments and credits related to Bullet and ODE.<br>
</p>

<p align=center><img src="images/dynamics1.jpg"></p>
<p class=imageLabel>[The two embedded physics engines]</p>
<br>

<p>The dynamics module allows simulating interactions between <a href="objects.htm">objects</a> that are near to real-world object interactions. It allows objects to fall, collide, bounce back, but it also allows a manipulator to grasp objects, a conveyor belt to drive parts forward, or a vehicle to roll in a realistic fashion over uneven terrain. Following figures illustrate a dynamic simulation:<br>
</p>

<p align=center><img src="images/dynamics2.jpg"></p>
<p class=imageLabel>[Dynamic simulation]</p>
<br>

<p>Unlike many other simulation software packages, V-REP is not a <em>pure</em> dynamics simulator. It can rather be seen as a hybrid simulator that combines kinematics and dynamics in order to obtain the best performance for various simulation scenarios. Nowadays, dynamic calculation libraries are still relying on many approximations and are relatively imprecise and slow, and wherever possible you should try to use kinematics instead (e.g. for robotic manipulators) and only rely on dynamics where otherwise not feasible (e.g. a robotic manipulator's gripper). If you are simulating a mobile robot that is not supposed to collide or physically interact with its environment (which most mobile robots are anyway very rarely supposed to do) and that is operating exclusively on flat ground (which groups the vast majority of mobile robots), then try rather using kinematic or geometric calculations to simulate the robot's movement. The result will be faster and more accurate.<br>
</p>

<p>Some results of the dynamics module can be recorded by graph objects. Refer to <a href="graphs.htm">graphs</a> and <a href="dataStreamTypes.htm">graph data stream types</a> for more information about how to record dynamics data.<br>
</p>



<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="designingDynamicSimulations.htm">Designing dynamic simulations</a></li>
<li><a href="dynamicsDialog.htm">Dynamics dialog</a></li>
<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
